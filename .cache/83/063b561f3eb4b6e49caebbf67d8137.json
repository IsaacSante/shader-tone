{"id":"../node_modules/@serialport/parser-readline/lib/index.js","dependencies":[{"name":"/Users/isaacsante/Documents/finalPrj/package.json","includedInParent":true,"mtime":1620625065885},{"name":"/Users/isaacsante/Documents/finalPrj/node_modules/@serialport/parser-readline/package.json","includedInParent":true,"mtime":1615832498882},{"name":"@serialport/parser-delimiter","loc":{"line":1,"column":32},"parent":"/Users/isaacsante/Documents/finalPrj/node_modules/@serialport/parser-readline/lib/index.js","resolved":"/Users/isaacsante/Documents/finalPrj/node_modules/@serialport/parser-delimiter/lib/index.js"},{"name":"buffer","parent":"/Users/isaacsante/Documents/finalPrj/node_modules/@serialport/parser-readline/lib/index.js","resolved":"/Users/isaacsante/Documents/finalPrj/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nconst DelimiterParser = require('@serialport/parser-delimiter');\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends DelimiterParser\n * @example\nconst SerialPort = require('serialport')\nconst Readline = require('@serialport/parser-readline')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Readline({ delimiter: '\\r\\n' }))\nparser.on('data', console.log)\n*/\n\n\nclass ReadLineParser extends DelimiterParser {\n  constructor(options) {\n    const opts = {\n      delimiter: Buffer.from('\\n', 'utf8'),\n      encoding: 'utf8',\n      ...options\n    };\n\n    if (typeof opts.delimiter === 'string') {\n      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);\n    }\n\n    super(opts);\n  }\n\n}\n\nmodule.exports = ReadLineParser;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":2,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":1,"column":0}},{"name":"DelimiterParser","generated":{"line":2,"column":6},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":1,"column":6}},{"generated":{"line":2,"column":21},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":1,"column":21}},{"name":"require","generated":{"line":2,"column":24},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":1,"column":24}},{"generated":{"line":2,"column":31},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":1,"column":31}},{"generated":{"line":2,"column":32},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":1,"column":32}},{"generated":{"line":2,"column":62},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":1,"column":31}},{"generated":{"line":2,"column":63},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":8,"column":0}},{"generated":{"line":9,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":9,"column":0}},{"generated":{"line":10,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":11,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":12,"column":0}},{"generated":{"line":13,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":13,"column":0}},{"generated":{"line":16,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":14,"column":0}},{"name":"ReadLineParser","generated":{"line":16,"column":6},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":14,"column":6}},{"generated":{"line":16,"column":20},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":14,"column":0}},{"name":"DelimiterParser","generated":{"line":16,"column":29},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":14,"column":29}},{"generated":{"line":16,"column":44},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":14,"column":0}},{"generated":{"line":16,"column":45},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":14,"column":45}},{"name":"constructor","generated":{"line":17,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":15,"column":2}},{"name":"constructor","generated":{"line":17,"column":2},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":15,"column":2}},{"generated":{"line":17,"column":13},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":15,"column":13}},{"name":"options","generated":{"line":17,"column":14},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":15,"column":14}},{"generated":{"line":17,"column":21},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":15,"column":13}},{"generated":{"line":17,"column":23},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":15,"column":23}},{"generated":{"line":18,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":16,"column":4}},{"name":"opts","generated":{"line":18,"column":10},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":16,"column":10}},{"generated":{"line":18,"column":14},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":16,"column":14}},{"generated":{"line":18,"column":17},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":16,"column":17}},{"name":"delimiter","generated":{"line":19,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":6}},{"name":"delimiter","generated":{"line":19,"column":6},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":6}},{"generated":{"line":19,"column":15},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":15}},{"name":"Buffer","generated":{"line":19,"column":17},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":17}},{"generated":{"line":19,"column":23},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":23}},{"name":"from","generated":{"line":19,"column":24},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":24}},{"generated":{"line":19,"column":28},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":17}},{"generated":{"line":19,"column":29},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":29}},{"generated":{"line":19,"column":33},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":17}},{"generated":{"line":19,"column":35},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":35}},{"generated":{"line":19,"column":41},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":17,"column":17}},{"generated":{"line":19,"column":42},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":16,"column":17}},{"name":"encoding","generated":{"line":20,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":18,"column":6}},{"name":"encoding","generated":{"line":20,"column":6},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":18,"column":6}},{"generated":{"line":20,"column":14},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":18,"column":14}},{"generated":{"line":20,"column":16},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":18,"column":16}},{"generated":{"line":20,"column":22},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":16,"column":17}},{"generated":{"line":21,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":19,"column":6}},{"name":"options","generated":{"line":21,"column":9},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":19,"column":9}},{"generated":{"line":22,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":16,"column":17}},{"generated":{"line":22,"column":5},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":16,"column":4}},{"generated":{"line":24,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":4}},{"generated":{"line":24,"column":8},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":8}},{"name":"opts","generated":{"line":24,"column":15},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":15}},{"generated":{"line":24,"column":19},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":19}},{"name":"delimiter","generated":{"line":24,"column":20},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":20}},{"generated":{"line":24,"column":29},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":8}},{"generated":{"line":24,"column":34},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":34}},{"generated":{"line":24,"column":42},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":4}},{"generated":{"line":24,"column":44},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":22,"column":44}},{"name":"opts","generated":{"line":25,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":6}},{"name":"opts","generated":{"line":25,"column":6},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":6}},{"generated":{"line":25,"column":10},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":10}},{"name":"delimiter","generated":{"line":25,"column":11},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":11}},{"generated":{"line":25,"column":20},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":6}},{"name":"Buffer","generated":{"line":25,"column":23},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":23}},{"generated":{"line":25,"column":29},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":29}},{"name":"from","generated":{"line":25,"column":30},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":30}},{"generated":{"line":25,"column":34},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":23}},{"name":"opts","generated":{"line":25,"column":35},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":35}},{"generated":{"line":25,"column":39},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":39}},{"name":"delimiter","generated":{"line":25,"column":40},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":40}},{"generated":{"line":25,"column":49},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":23}},{"name":"opts","generated":{"line":25,"column":51},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":51}},{"generated":{"line":25,"column":55},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":55}},{"name":"encoding","generated":{"line":25,"column":56},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":56}},{"generated":{"line":25,"column":64},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":23}},{"generated":{"line":25,"column":65},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":23,"column":6}},{"generated":{"line":26,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":24,"column":5}},{"generated":{"line":28,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":26,"column":4}},{"name":"opts","generated":{"line":28,"column":10},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":26,"column":10}},{"generated":{"line":28,"column":14},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":26,"column":4}},{"generated":{"line":29,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":27,"column":3}},{"generated":{"line":31,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":14,"column":45}},{"name":"module","generated":{"line":33,"column":0},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":30,"column":0}},{"generated":{"line":33,"column":6},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":30,"column":6}},{"name":"exports","generated":{"line":33,"column":7},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":30,"column":7}},{"generated":{"line":33,"column":14},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":30,"column":0}},{"name":"ReadLineParser","generated":{"line":33,"column":17},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":30,"column":17}},{"generated":{"line":33,"column":31},"source":"../node_modules/@serialport/parser-readline/lib/index.js","original":{"line":30,"column":0}}],"sources":{"../node_modules/@serialport/parser-readline/lib/index.js":"const DelimiterParser = require('@serialport/parser-delimiter')\n\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends DelimiterParser\n * @example\nconst SerialPort = require('serialport')\nconst Readline = require('@serialport/parser-readline')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Readline({ delimiter: '\\r\\n' }))\nparser.on('data', console.log)\n*/\nclass ReadLineParser extends DelimiterParser {\n  constructor(options) {\n    const opts = {\n      delimiter: Buffer.from('\\n', 'utf8'),\n      encoding: 'utf8',\n      ...options,\n    }\n\n    if (typeof opts.delimiter === 'string') {\n      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding)\n    }\n\n    super(opts)\n  }\n}\n\nmodule.exports = ReadLineParser\n"},"lineCount":null}},"error":null,"hash":"7055e9daa67ddbc05d184fe501f2dc7e","cacheData":{"env":{}}}